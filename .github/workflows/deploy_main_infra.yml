name: Deploy main infrastructure

# Controls when the workflow will run
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - ".github/workflows/**"
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  DEPLOY_WORKING_DIR: ./deployments/
  GLOBAL_WORKING_DIR: ./global/

jobs:
  lint:
    uses: ./.github/workflows/terraform_lint.yml # Call the reusable lint workflow
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  tfsec:
    uses: ./.github/workflows/tfsec.yml # Call the reusable tfsec workflow
  deploy_dev:
    needs: [lint, tfsec]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Step 2: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      # Step 3: Initialize Terraform
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

      # Step 4: Select or create the dev workspace
      - name: Terraform workspace select or create dev
        run: terraform workspace select -or-create dev
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}
      # Step 5: Apply Terraform changes
      - name: Terraform apply dev
        id: apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

  deploy_stage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Step 2: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6 # Specify the desired version of Terraform

      # Step 3: Initialize Terraform
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

      # Step 4: Select or create the stage workspace
      - name: Terraform workspace select or create stage
        run: terraform workspace select -or-create stage
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}
      # Step 5: Apply Terraform changes
      - name: Terraform apply stage
        id: apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

  deploy_prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Step 2: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6 # Specify the desired version of Terraform

      # Step 3: Initialize Terraform
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

      # Step 4: Select or create the prod workspace
      - name: Terraform workspace select or create prod
        run: terraform workspace select -or-create prod
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

      # Step 5: Apply Terraform changes
      - name: Terraform apply prod
        id: apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

  deploy_global:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Step 2: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6 # Specify the desired version of Terraform

      # Step 3: Initialize Terraform
      - name: Terraform init
        id: init
        run: terraform init
        working-directory: ${{ env.GLOBAL_WORKING_DIR }}

      # Step 4: Select or create the prod workspace
      - name: Terraform workspace select default
        run: terraform workspace select default
        working-directory: ${{ env.DEPLOY_WORKING_DIR }}

      # Step 5: Apply Terraform changes
      - name: Terraform apply global
        id: apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.GLOBAL_WORKING_DIR }}
